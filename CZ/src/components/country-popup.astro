<div id="popup">
	<div class="popup-content">
		<p>You seem to be visiting from a different country. Would you like to visit english version of our page?</p>
		<div class="buttons">
			<button id="close">Close</button>
			<a href="https://www.natios.eu"><button id="redirect">Visit natios.eu</button></a>
		</div>
		<div id="cross-close-popup" class="close-popup"></div>
	</div>
</div>

<style>
	#popup {
		display: none;
		position: fixed;
		width: 100%;
		min-width: 300px;
		height: 100vh;
		color: var(--color-white);
		text-align: center;
		z-index: 99999999;
		top: 0;
		left: 0;
		font-size: var(--fs-18-12);
		font-weight: var(--fw-book);
	}
	#popup.visible {
		display: flex;
	}
	#popup::before {
		content: "";
		display: block;
		position: fixed;
		left: 0;
		top: 0;
		height: 100%;
		width: 100%;
		background: var(--color-primary-800-backdrop-popup);
		backdrop-filter: blur(3px);
	}
	.popup-content {
		width: 40%;
		min-width: 300px;
		margin: auto;
		border: 1px solid var(--color-primary-400-50);
		border-radius: var(--border-radius-12);
		padding: 20px;
		background: var(--color-primary-800);
	}
	.buttons {
		display: flex;
		justify-content: center;
		gap: 20px;
		margin-top: 30px;
	}
	button {
		border-radius: var(--border-radius-12);
		border-style: solid;
		border-width: 1px;
		border-color: var(--color-primary-400);
		padding: 0.5em 1em;
		cursor: pointer;
		position: relative;
		top: 0;
		transition:
			filter 0.2s ease,
			top 0.2s ease;
	}
	button:hover {
		top: -4px;
		filter: drop-shadow(2px 0px 8px var(--color-primary-400-50));
	}
	#redirect {
		font-weight: var(--fw-regular);

		border-color: var(--color-primary-400);
		background: var(--color-blue-600);
		background: -moz-linear-gradient(180deg, var(--color-blue-600) 0%, var(--color-primary-400) 100%);
		background: -webkit-linear-gradient(180deg, var(--color-blue-600) 0%, var(--color-primary-400) 100%);
		background: linear-gradient(180deg, var(--color-blue-600) 0%, var(--color-primary-400) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="var(--color-blue-600)",endColorstr="var(--color-primary-400)",GradientType=1);
	}
	.close-popup {
		position: absolute;
		top: 10px;
		right: 10px;
		width: 14px;
		height: 14px;
		background: transparent;
		cursor: pointer;
		padding: 10px;
	}

	.close-popup::before,
	.close-popup::after {
		content: "";
		position: absolute;
		top: 0px;
		left: 9px;
		height: 14px;
		width: 2px;
		background-color: white;
	}

	.close-popup::before {
		transform: rotate(45deg);
	}

	.close-popup::after {
		transform: rotate(-45deg);
	}
</style>

<script>
	// Check if we've already asked this session
	document.addEventListener("DOMContentLoaded", function () {
		let popup = document.getElementById("popup");
		setTimeout(() => {
			/* 			
			// Check if we've already asked this session
			if (!sessionStorage.getItem("asked")) {
				// Get the first language from the navigator.languages array
				let language = navigator.languages ? navigator.languages[0] : navigator.language;

				// Check if the language is Czech or Slovak
				if (language !== "cs" && language !== "sk") {
					// Show the popup
					popup.classList.add("visible");
				}
			} */

			/* 			if (!sessionStorage.getItem("asked")) {
				// Get the first language from the navigator.languages array
				let language =
					navigator.languages && navigator.languages.length > 0 ? navigator.languages[0] : navigator.language;

				// Fetch the geolocation data of the IP address
				fetch("http://ip-api.com/json")
					.then((response) => response.json())
					.then((data) => {
						// Check if the language is Czech or Slovak and the country of the IP address is not Czech Republic or Slovakia
						if (language !== "cs" && language !== "sk" && data.countryCode !== "CZ" && data.countryCode !== "SK") {
							// Show the popup
							popup.classList.add("visible");
						}
					})
					.catch(() => {
						console.log("Error fetching the country data");
					});
			} */

			/* 				fetch("https://ipinfo.io/json")
					.then((response) => response.json())
					.then((data) => {
						// Check if the language is Czech or Slovak and the country of the IP address is not Czech Republic or Slovakia
						if (language !== "cs" && language !== "sk" && data.country !== "CZ" && data.country !== "SK") {
							// Show the popup
							popup.classList.add("visible");
						}
					})
					.catch(() => {
						console.log("Error fetching the country data");
					}); */
			let countryCode = "";
			if (!sessionStorage.getItem("asked")) {
				// Get the first language from the navigator.languages array
				let language =
					navigator.languages && navigator.languages.length > 0 ? navigator.languages[0] : navigator.language;

				if (language === "cs" || language === "sk") {
					sessionStorage.setItem("asked", "true");
				} else {
					// Fetch the geolocation data of the IP address
					fetch("https://api.ipregistry.co/?key=lv2b53fq5jebigr6")
						.then(function (response) {
							return response.json();
						})
						.then(function (payload) {
							countryCode = payload.location.country.code;

							if (countryCode === "CZ" || countryCode === "SK") {
								sessionStorage.setItem("asked", "true");
							} else {
								popup.classList.add("visible");
							}
						})
						.catch(() => {
							console.log("Error fetching the country data");
						});
				}
			}

			// Add event listeners to the buttons
			document.getElementById("redirect").addEventListener("click", function () {
				sessionStorage.setItem("asked", "true");
			});

			document.getElementById("cross-close-popup").addEventListener("click", function () {
				popup.classList.remove("visible");
				sessionStorage.setItem("asked", "true");
			});

			document.getElementById("close").addEventListener("click", function () {
				popup.classList.remove("visible");
				sessionStorage.setItem("asked", "true");
			});
		}, 500);
	});
</script>
